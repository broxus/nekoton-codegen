pub mod functions {
    use serde::{Serialize, Deserialize};
    use nekoton_abi::{UnpackAbi, UnpackAbiPlain, PackAbi, UnpackerError, UnpackerResult, BuildTokenValue, TokenValueExt, FunctionBuilder};
    use ton_abi::{Param, ParamType};
    use std::collections::HashMap;
    use once_cell::sync::OnceCell;

    #[derive(Copy, Clone, Debug)]
    pub struct SafeMultisigWalletAbi;

    impl SafeMultisigWalletAbi {
        pub fn test1() -> &'static ton_abi::Function {
            static FUNCTION: OnceCell<ton_abi::Function> = OnceCell::new();
            FUNCTION.get_or_init(|| {
            let mut builder = FunctionBuilder::new("test1");
            let output = vec![Param{name: "custodians".to_string(), kind: ParamType::Array(Box::new(ParamType::Tuple(vec![Param{name: "index".to_string(), kind: ParamType::Uint(8)}, Param{name: "pubkey".to_string(), kind: ParamType::Uint(256)}, Param{name: "test".to_string(), kind: ParamType::Tuple(vec![Param{name: "index1".to_string(), kind: ParamType::Uint(8)}, Param{name: "index2".to_string(), kind: ParamType::Uint(8)}])}])))}];
            builder = builder.outputs(output);
            builder.build()
            })
        }

        pub fn test2() -> &'static ton_abi::Function {
            static FUNCTION: OnceCell<ton_abi::Function> = OnceCell::new();
            FUNCTION.get_or_init(|| {
            let mut builder = FunctionBuilder::new("test2");
            let input = vec![Param{name: "custodians".to_string(), kind: ParamType::Tuple(vec![Param{name: "index".to_string(), kind: ParamType::Uint(8)}, Param{name: "pubkey".to_string(), kind: ParamType::Uint(256)}, Param{name: "test".to_string(), kind: ParamType::Tuple(vec![Param{name: "index1".to_string(), kind: ParamType::Uint(8)}, Param{name: "index2".to_string(), kind: ParamType::Uint(8)}])}])}];
            builder = builder.inputs(input);
            builder.build()
            })
        }

        pub fn test3() -> &'static ton_abi::Function {
            static FUNCTION: OnceCell<ton_abi::Function> = OnceCell::new();
            FUNCTION.get_or_init(|| {
            let mut builder = FunctionBuilder::new("test3");
            let input = vec![Param{name: "test".to_string(), kind: ParamType::Tuple(vec![Param{name: "index1".to_string(), kind: ParamType::Uint(8)}, Param{name: "index2".to_string(), kind: ParamType::Uint(8)}])}];
            builder = builder.inputs(input);
            builder.build()
            })
        }
    }

    #[derive(Serialize, Deserialize, Debug, Clone, PackAbi, UnpackAbi)]
    pub struct TupleStruct0 {
        #[abi]
        pub index1: u8,
        #[abi]
        pub index2: u8,
    }

    #[derive(Serialize, Deserialize, Debug, Clone, PackAbi, UnpackAbi)]
    pub struct TupleStruct1 {
        #[abi]
        pub index: u8,
        #[abi]
        pub pubkey: ton_types::UInt256,
        #[abi]
        pub test: TupleStruct1,
    }

    #[derive(Serialize, Deserialize, Debug, Clone, PackAbi, UnpackAbi)]
    pub struct TupleStruct3 {
        #[abi]
        pub index: u8,
        #[abi]
        pub pubkey: ton_types::UInt256,
        #[abi]
        pub test: TupleStruct3,
    }

    #[derive(Serialize, Deserialize, Debug, Clone, PackAbi, UnpackAbiPlain)]
    pub struct Test1Output {
        #[abi]
        pub custodians: TupleStruct1,
    }

    #[derive(Serialize, Deserialize, Debug, Clone, PackAbi, UnpackAbi)]
    pub struct Test2Input {
        #[abi]
        pub custodians: TupleStruct3,
    }

    #[derive(Serialize, Deserialize, Debug, Clone, PackAbi, UnpackAbi)]
    pub struct Test3Input {
        #[abi]
        pub test: TupleStruct0,
    }
}
